/**
 * Name: Anh Bach
 * ID: A17133630
 * Email: tbach@ucsd.edu
 * Sources used: Lecture Slides, Oracle, Piazza
 * This find contains Student class that implements
 * Comparable<Student>. It represents student with their
 * last, first name and PID. It also creates the unique key
 * for each student by hashCode
 */

import java.util.Objects;

/**
 * Student class that represents each student by three different
 * instance variables. It has all methods to generate student's data
 * and create an unique key for each student and compare them.
 */
public class Student implements Comparable<Student> {
    private final String firstName;
    private final String lastName;
    private final String PID;

    /**
     * Constuctor to initialize the student’s information
     * @param firstName - student's first name
     * @param lastName - student's last name
     * @param PID - student's unique ID 
     */
    public Student(String firstName, String lastName, String PID) {
        if (firstName == null || lastName == null || PID == null) {
            throw new IllegalArgumentException();
        }
        this.firstName = firstName;
        this.lastName = lastName;
        this.PID = PID;
    }

    /**
     * Method to get student's last name
     * @return student’s last name
     */
    public String getLastName() {
        return this.lastName;
    }

    /**
     * Method to get student's first name
     * @return student's first name
     */
    public String getFirstName() {
        return this.firstName;
    }

    /**
     * Method to get student's PID
     * @return student's PID
     */
    public String getPID() {
        return this.PID;
    }

    /**
     * Determine if two students are equal by comparing
     * instance variable of current student and Student object
     * @param o - Student object to be compared with
     * @return true if all the instance variables are equal,
     * false otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        // False if o is not a non-null Student
        if (o == null) {
            return false;
        }
        if (o instanceof Student) {
            // Type cast for o
            Student obj = (Student) o;
            // Compare all the instance variables of o equal
            // the instance variable of the current Student object
            if (this.lastName.equals(obj.lastName) && 
                this.firstName.equals(obj.firstName) &&
                this.PID.equals(obj.PID)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Generate unique hash value for each student
     * @return hash value generated by Object’s hash function
     */
    @Override
    public int hashCode() {
        // Using hash function to generate hash value
        return Objects.hash(this.firstName, this.lastName, this.PID);
    }

    /**
     * Lexicographically all the instance variables compare current
     * with Student object in specific order: lastName, firstName, and PID
     * @return 0 if all the instance variables are equivalent,
     * -1 if the current object comes before Student o 
     * 1 if current object comes after Student o
     */
    @Override
    public int compareTo(Student o) {
        // Compare students' last names
        if (this.lastName.compareTo(o.lastName) > 0) {
            return 1;
        }
        if (this.lastName.compareTo(o.lastName) < 0) {
            return -1;
        }
        // Compare students' first names
        if (this.firstName.compareTo(o.firstName) > 0) {
            return 1;
        }
        if (this.firstName.compareTo(o.firstName) < 0) {
            return -1;
        }
        // Compare students' PIDs
        if (this.PID.compareTo(o.PID) > 0) {
            return 1;
        }
        if (this.PID.compareTo(o.PID) < 0) {
            return -1;
        }
        // Return 0 if all the instance variables are equal
        return 0;
    }
}
